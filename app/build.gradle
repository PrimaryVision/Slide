import java.util.Properties

plugins {
    id 'com.android.application'
    id 'com.gladed.androidgitversion' version '0.4.14'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'com.github.breadmoirai.github-release' version '2.5.2'
    id 'com.diffplug.spotless' version '7.0.2'
}

android {
    compileSdk 34
    namespace "me.edgan.redditslide"


    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def appName = "slide"
            def buildType = variant.buildType
            def flavors = variant.productFlavors.collect { it.name }.join("-") ?: "noFlavor"
            def versionName = variant.versionName
            def versionCode = variant.versionCode
            def newApkName = "${appName}-${flavors}-${versionName}(${versionCode}).apk"

            if (flavors.contains("withGPlay")) {
                newApkName = "${appName}-${versionName}.apk"
            } else if (flavors.contains("NoGPlay")) {
                newApkName = "${appName}-${flavor}-${versionName}.apk"
            } else if (buildType == "debug") {
                newApkName = "${appName}-${buildType}-${versionName}.apk"
            }

            // Assign the new filename
            output.outputFileName = newApkName
        }
    }

    defaultConfig {
        applicationId "me.edgan.redditslide"
        minSdk 29
        targetSdk 34
        versionCode 725
        versionName androidGitVersion.name()

        multiDexEnabled true
        vectorDrawables.useSupportLibrary true
    }

    flavorDimensions "variant"
    productFlavors {
        withGPlay {
            dimension "variant"
            buildConfigField "boolean", "isFDroid", "false"
        }
        noGPlay {
            dimension "variant"
            buildConfigField "boolean", "isFDroid", "true"
        }
    }

    def keystorePropertiesFile = rootProject.file("keystore.properties")

    if (keystorePropertiesFile.exists()) {
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

        signingConfigs {
            withGPlay {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    } else {
        println("Warning: keystore.properties file not found. Skipping signing configuration for withGPlay.")
    }


    buildTypes {
        release {
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.withGPlay
            } else {
                println("Warning: keystore.properties file not found. Skipping signing configuration for release.")
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", "Slide"
        }
        debug {
            applicationIdSuffix ".debug"
            resValue "string", "app_name", "Slide Debug"
        }
    }

    packagingOptions {
        exclude 'META-INF/*'
    }

    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }

    lint {
        quiet true
        abortOnError false
        ignoreWarnings true
        // Translations are crowd-sourced
        disable 'MissingTranslation', 'ExtraTranslation',
                'StaticFieldLeak', 'ClickableViewAccessibility', 'NotSibling'
    }

    testOptions {
        unitTests {
            includeAndroidResources true
        }
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }
}

configurations {
    all {
        exclude module: 'httpclient'
    }
}

def githubPropertiesFile = rootProject.file("github.properties")

if (githubPropertiesFile.exists()) {
    def githubProperties = new Properties()
    githubProperties.load(new FileInputStream(githubPropertiesFile))

    githubRelease {
       token = githubProperties["githubToken"]
        owner = "edgan"
        repo = "Slide"
        tagName = android.defaultConfig.versionName ?: "default-version"
        targetCommitish = "master"
        releaseName = "Release ${android.defaultConfig.versionName ?: "default-version"}"
        body = "Automated release of version ${android.defaultConfig.versionName ?: "default-version"}"
        draft = false
        prerelease = false
        overwrite = false

        // Dynamically set releaseAssets by searching the APK path
        def apkFiles = fileTree(dir: "build/outputs/apk/withGPlay/release/", include: "*.apk").files.toList()
        if (apkFiles.isEmpty()) {
            println("Warning: No APK files found in the directory 'build/outputs/apk/withGPlay/release/'.")
        } else {
            releaseAssets = apkFiles
        }
    }
} else {
    println("Warning: github.properties file not found. Skipping GitHub release configuration.")
}

dependencies {
/** Flavors **/
    // For Google Sign-In
    withGPlayImplementation 'com.google.android.gms:play-services-auth:20.6.0'
    // For the REST API Client
    withGPlayImplementation 'com.google.http-client:google-http-client:1.45.3'
    withGPlayImplementation 'com.google.api-client:google-api-client-android:2.7.1'
    withGPlayImplementation 'com.google.api-client:google-api-client-gson:2.7.1'
    withGPlayImplementation 'com.google.apis:google-api-services-drive:v3-rev20241206-2.0.0'

/** Custom **/
    // Draggable sliding up panel
    implementation 'com.github.edgan:AndroidSlidingUpPanel:8413b22a2a'
    implementation 'com.github.edgan:JRAW:bacd6f5764'
    implementation 'io.github.ParkSangGwon:tedimagepicker:1.6.1'
    def commonmarkVersion = '0ebc0749c7'
    implementation "com.github.Haptic-Apps.commonmark-java:commonmark:$commonmarkVersion"
    implementation "com.github.Haptic-Apps.commonmark-java:commonmark-ext-gfm-strikethrough:$commonmarkVersion"
    implementation "com.github.Haptic-Apps.commonmark-java:commonmark-ext-gfm-tables:$commonmarkVersion"
    implementation 'com.github.Haptic-Apps:JReadability:bb291880a5'
    implementation 'com.github.Haptic-Apps.Android-RobotoTextView:robototextview:f6d0eb5ac7'

/** AndroidX **/
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.browser:browser:1.3.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.core:core:1.6.0'
    implementation 'androidx.fragment:fragment:1.3.6'
    implementation 'androidx.media:media:1.3.1'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.webkit:webkit:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation "androidx.concurrent:concurrent-futures:1.1.0"
    implementation "androidx.lifecycle:lifecycle-runtime:2.5.1"
    implementation "androidx.databinding:databinding-runtime:8.7.3"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
/** ExoPlayer **/
    // Application level media player
    implementation "com.google.android.exoplayer:exoplayer-core:2.19.1"
    implementation "com.google.android.exoplayer:exoplayer-dash:2.19.1"
    implementation "com.google.android.exoplayer:exoplayer-ui:2.19.1"
    implementation "com.google.android.exoplayer:extension-okhttp:2.19.1"

/** Third-party **/
    // Good for debugging JRAW
    //implementation 'org.slf4j:slf4j-android:1.7.36'

/**** Frontend (UI-related) ****/

    // Custom dialogs
    implementation 'com.afollestad.material-dialogs:commons:0.9.6.0'

    // Snackbar engagement for rating
    implementation 'com.github.ligi.snackengage:snackengage-core:0.29'
    implementation 'com.github.ligi.snackengage:snackengage-playrate:0.29'

    // Material design components for pre-Lollipop APIs
    //  NOTE: Replace rey5137:material with AndroidX versions?
    implementation 'com.github.rey5137:material:1.3.1'

    // Image loading, caching, and displaying
    //  NOTE: Replace with Glide/Picasso
    // com.nostra13.universalimageloader:universal-image-loader
    implementation 'com.github.edgan:Android-Universal-Image-Loader:644f0269eb@aar'

    // Custom image view for photo galleries and large images
    implementation 'com.github.davemorrissey:subsampling-scale-image-view:173e421fdb'

    // Image cropping
    implementation 'com.github.CanHub:Android-Image-Cropper:3.2.2'

    // Bottom sheet implementation
    //  NOTE: Deprecated in favor of official Google bottom sheets
    implementation 'com.cocosw:bottomsheet:1.5.0@aar'

    // Blurring
    implementation 'com.github.wasabeef:Blurry:3.0.0'

    // ImageView that supports rounded corners
    implementation 'com.makeramen:roundedimageview:2.3.0'

    // Draggable sliding up panel
    //implementation 'com.sothree.slidinguppanel:library:3.4.0'

    // Floating action button menu implementation
    implementation 'com.nambimobile.widgets:expandable-fab:1.2.1'

    // ViewAnimationUtils.createCircularReveal for pre-Lollipop APIs
    implementation 'com.github.ozodrukh.CircularReveal:circualreveal:2.1.0'

    // RecyclerView animations
    implementation 'com.mikepenz:itemanimators:1.1.0@aar'

    // iOS-like over-scrolling effect
    implementation 'io.github.everythingme:overscroll-decor-android:1.1.1'

    // Library information
    implementation 'com.mikepenz:aboutlibraries:6.2.3'


/**** Backend logic ****/

    // Core Java libraries from Google
    implementation 'com.google.guava:guava:31.0.1-android'

    // Application restarting
    implementation 'com.jakewharton:process-phoenix:2.1.2'

    // KV store based on SQLite
    //  equal to 0.1.0, but we can't use jcenter
    implementation 'com.github.lusfold:AndroidKeyValueStore:620c363'

    // Helper utilities for the java.lang API
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // Algorithms working on strings
    implementation 'org.apache.commons:commons-text:1.9'

    // Utilities to assist with developing IO functionality
    implementation 'commons-io:commons-io:2.11.0'

    // Simplified bitmap decoding and scaling
    implementation 'com.github.suckgamony.RapidDecoder:library:7cdfca47fa'

    // HTTP client
    //implementation 'com.squareup.okhttp3:okhttp:4.11.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.2'

    // Convert Java objects into JSON and back
    implementation 'com.google.code.gson:gson:2.8.9'

    // WebSocket client
    implementation 'com.neovisionaries:nv-websocket-client:2.14'

    // Read, write, and create MP4 files
    implementation 'org.mp4parser:isoparser:1.9.41'
    implementation 'org.mp4parser:muxer:1.9.41'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.6.0'

/** Testing **/
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
}

spotless {
    java {
        target '**/*.java'
        removeUnusedImports()
        trimTrailingWhitespace()
        leadingTabsToSpaces(4)
    }
    format 'misc', {
        target '**/*.gradle', '**/*.md', '**/.gitignore'
        leadingTabsToSpaces(4)
        trimTrailingWhitespace()
    }
    format 'xml', {
        target '**/*.xml'
        leadingTabsToSpaces(4)
        trimTrailingWhitespace()
    }
}
